#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>

struct cell_data{
    
    int x,y;
    int index;
    char cell_char;
    bool is_obstacle;
    bool is_wall;
    bool is_visited;

}current_cell,*ptr_cell;

bool valid_cell(int index,int x,int y,int height,int width){
    if(index>-1 && index<height*width && x!=0 && x!= width-1 && y!=0 && y!= height-1){
        return true;
    }
    else{
        return false;
    }
}

void print_maze(struct cell_data cell[],struct cell_data *ptr_cell,int height,int width){
    int l=0;
    printf("\n");
    for(int i=0;i<height;i++){
        for(int j=0;j<width;j++){
            ptr_cell=&cell[l];
            printf("%c ",ptr_cell->cell_char);
            Sleep(10);
            l++;
        }
        printf("\n");
    }
}

void dfs(struct cell_data current_cell,struct cell_data *ptr_cell,struct cell_data cell[],int height,int width){
    
    struct cell_data neighbour[4];
    
    ptr_cell=&cell[current_cell.index+1];
    if(valid_cell(current_cell.index,current_cell.x,current_cell.y,height,width)==true && valid_cell(ptr_cell->index,ptr_cell->x,ptr_cell->y,height,width)==true){
        neighbour[0]=*ptr_cell;
        printf("right ");
        printf("Current cell index is: %d Neighbour cell index is: %d\n",current_cell.index,current_cell.index+1);
    }
    
    ptr_cell=&cell[current_cell.index-width];
    if(valid_cell(current_cell.index,current_cell.x,current_cell.y,height,width)==true && valid_cell(ptr_cell->index,ptr_cell->x,ptr_cell->y,height,width)==true){
        neighbour[1]=*ptr_cell;
        printf("top ");
        printf("Current cell index is: %d Neighbour cell index is: %d\n",current_cell.index,current_cell.index-width);
    }
    
    ptr_cell=&cell[current_cell.index-1];
    if(valid_cell(current_cell.index,current_cell.x,current_cell.y,height,width)==true && valid_cell(ptr_cell->index,ptr_cell->x,ptr_cell->y,height,width)==true){
        neighbour[2]=*ptr_cell;
        printf("left ");
        printf("Current cell index is: %d Neighbour cell index is: %d\n",current_cell.index,current_cell.index-1);
    }
    
    ptr_cell=&cell[current_cell.index+width];
    if(valid_cell(current_cell.index,current_cell.x,current_cell.y,height,width)==true && valid_cell(ptr_cell->index,ptr_cell->x,ptr_cell->y,height,width)==true){
        neighbour[3]=*ptr_cell;
        printf("bottom ");
        printf("Current cell index is: %d Neighbour cell index is: %d\n",current_cell.index,current_cell.index+width);
    }
    printf("dfs");
    if(neighbour[1].is_wall==false && neighbour[1].is_visited==false){
        ptr_cell=&cell[current_cell.index];
        ptr_cell->cell_char=' ';
        ptr_cell->is_obstacle=false;
        ptr_cell->is_visited=true;
        printf("%d %d\n\n",current_cell.index,current_cell.index+1);
        ptr_cell=&cell[current_cell.index+1];
        current_cell=cell[current_cell.index+1];
        dfs(current_cell,ptr_cell,cell,height,width);
    }

}

int main(){

    int height,width,k=0;
    
    printf("Enter Height of the maze: ");
    scanf("%d",&height);

    printf("Enter Width of the maze: ");
    scanf("%d",&width);

    printf("\n");

    struct cell_data cell[height*width];

    for(int i=0;i<height;i++){
        for(int j=0;j<width;j++){
            cell[k].x=j;
            cell[k].y=i;
            cell[k].index=k;
            cell[k].cell_char='*';
            cell[k].is_obstacle=true;
            cell[k].is_visited=false;
            cell[k].is_wall=false;

            if(cell[k].x==0 || cell[k].x==width-1 || cell[k].y==0 || cell[k].y==height-1){
                cell[k].is_wall=true;
                cell[k].is_obstacle=true;
                cell[k].is_visited=true;
            }
            if(cell[k].x==0 && cell[k].y==height-2){
                cell[k].cell_char='S';
                cell[k].is_wall=true;
                cell[k].is_visited=true;
            }
            if(cell[k].x==width-1 && cell[k].y==1){
                cell[k].cell_char='E';
                cell[k].is_wall=true;
                cell[k].is_visited=true;
            }
            k++;
        }
    }

    current_cell=cell[((height*width)-1)-(width*2)+2];
    ptr_cell=&cell[0];
    dfs(current_cell,ptr_cell,cell,height,width);
    print_maze(cell,ptr_cell,height,width);
    return 0;
}
